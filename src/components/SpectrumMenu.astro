---
// Componente del menú principal del Spectrum
export interface Props {
  title?: string;
  options?: Array<{ id: string; label: string; url: string }>;
}

const { 
  title = "Osukaru",
  options = [
    { id: "experiencia", label: "Experiencia", url: "/experiencia" },
    { id: "conocimientos", label: "Conocimientos", url: "/conocimientos" },
    { id: "proyectos", label: "Mis proyectos", url: "/proyectos" },
    { id: "contacto", label: "Contacto", url: "/contacto" }
  ]
} = Astro.props;
---

<div class="spectrum-container">
  <div class="spectrum-menu">
    <!-- Header con título y barra de colores -->
    <div class="spectrum-header">
      <div class="spectrum-title">{title}</div>
      <div class="spectrum-color-bar"></div>
    </div>

    <!-- Lista de opciones -->
    <ul class="spectrum-options" id="spectrum-options">
      {options.map((option, index) => (
        <li 
          class="spectrum-option" 
          data-index={index}
          data-url={option.url}
          data-id={option.id}
        >
          {option.label}
        </li>
      ))}
    </ul>

    <!-- El footer se renderiza fuera del menú, en la parte baja del viewport -->
  </div>
</div>

<script>
  // Navegación por teclado del Spectrum
  class SpectrumNavigation {
    private options: NodeListOf<Element>;
    private selectedIndex: number = 0;
    private audioContext: AudioContext | null = null;

    constructor() {
      this.options = document.querySelectorAll('.spectrum-option');
      this.initAudio();
      this.initNavigation();
      this.updateSelection();
    }

    private initAudio() {
      try {
        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      } catch (error) {
        console.log('Audio no disponible');
      }
    }

    private playSound(frequency: number = 1000, duration: number = 100) {
      if (!this.audioContext) return;

      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);
      
      oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
      oscillator.start();
      oscillator.stop(this.audioContext.currentTime + duration / 1000);
    }

    private initNavigation() {
      document.addEventListener('keydown', (e) => {
        switch(e.key) {
          case 'ArrowUp':
            e.preventDefault();
            this.moveSelection(-1);
            break;
          case 'ArrowDown':
            e.preventDefault();
            this.moveSelection(1);
            break;
          case 'Enter':
          case ' ':
            e.preventDefault();
            this.selectOption();
            break;
          case 'Escape':
            e.preventDefault();
            this.goHome();
            break;
        }
      });

      // Navegación táctil para mobile
      this.options.forEach((option, index) => {
        option.addEventListener('click', () => {
          this.selectedIndex = index;
          this.updateSelection();
          this.selectOption();
        });

        option.addEventListener('touchstart', () => {
          this.selectedIndex = index;
          this.updateSelection();
        });
      });
    }

    private moveSelection(direction: number) {
      this.playSound(1000, 50); // Sonido de navegación
      
      this.selectedIndex += direction;
      
      if (this.selectedIndex < 0) {
        this.selectedIndex = this.options.length - 1;
      } else if (this.selectedIndex >= this.options.length) {
        this.selectedIndex = 0;
      }
      
      this.updateSelection();
    }

    private updateSelection() {
      this.options.forEach((option, index) => {
        if (index === this.selectedIndex) {
          option.classList.add('selected');
        } else {
          option.classList.remove('selected');
        }
      });
    }

    private selectOption() {
      const selectedOption = this.options[this.selectedIndex] as HTMLElement;
      const url = selectedOption.dataset.url;
      const id = selectedOption.dataset.id;
      
      if (url) {
        this.playSound(1200, 150); // Sonido de confirmación
        
        // Simular pantalla de carga
        this.showLoadingScreen();
        
        // Navegar después de un breve delay
        setTimeout(() => {
          window.location.href = url;
        }, 2000);
      }
    }

    private showLoadingScreen() {
      // Ocultar el spectrum-container para que no interfiera con los bordes
      const container = document.querySelector('.spectrum-container');
      if (container && container instanceof HTMLElement) {
        container.style.display = 'none';
      }
      
      // Modificar directamente el viewport para mostrar los bordes del Spectrum
      const viewport = document.querySelector('.spectrum-viewport');
      if (viewport) {
        // Añadir clase para activar los bordes del Spectrum
        viewport.classList.add('spectrum-loading-mode');
        
        // Añadir el texto de carga dentro del viewport
        const loadingContent = document.createElement('div');
        loadingContent.className = 'loading-content';
        loadingContent.innerHTML = `
          <div class="loading-text">Cargando...</div>
          <div class="loading-animation"></div>
        `;
        
        // Limpiar contenido existente y añadir el loader
        viewport.innerHTML = '';
        viewport.appendChild(loadingContent);
      }
    }

    private goHome() {
      window.location.href = '/';
    }
  }

  // Inicializar navegación cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new SpectrumNavigation();
  });
</script>
