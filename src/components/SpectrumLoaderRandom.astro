---
export interface Props {
  duration?: number;
  autoHide?: boolean;
}

const { duration = 2000, autoHide = true } = Astro.props;
---

<!-- Contenedor √∫nico que cambiar√° de clase para mostrar diferentes estilos -->
<div class="spectrum-loader-random" data-duration={duration} data-auto-hide={autoHide}>
  <div class="spectrum-border-full-random"></div>
  <div class="spectrum-viewport-mask-random"></div>
</div>

<script>
  // Selecci√≥n aleatoria simple
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.spectrum-loader-random');
    if (!container) return;

    // 50% de probabilidad de usar colores alternativos
    const useAltColors = Math.random() < 0.5;
    
    if (useAltColors) {
      container.classList.add('alt-colors');
      console.log('üé≤ Loader seleccionado: Alternativo (Azul/Amarillo)');
    } else {
      container.classList.add('original-colors');
      console.log('üé≤ Loader seleccionado: Original (Rojo/Cyan)');
    }

    // Inicializar audio seg√∫n el loader seleccionado
    initAudio(useAltColors);

    // Configurar ocultaci√≥n autom√°tica si est√° habilitada
    const duration = parseInt(container.getAttribute('data-duration') || '2000');
    const autoHide = container.getAttribute('data-auto-hide') === 'true';
    
    if (autoHide) {
      setTimeout(() => {
        (container as any).style.opacity = '0';
        (container as any).style.transition = 'opacity 0.3s ease-in-out';
        
        setTimeout(() => {
          container.remove();
        }, 300);
      }, duration);
    }
  });

  function initAudio(useAltColors) {
    try {
      const loadingSound = new Audio();
      
      // Usar archivo MP3 seg√∫n el loader seleccionado
      if (useAltColors) {
        loadingSound.src = '/sounds/spectrum-loading-alt.mp3';
        console.log('üîä Sonido de carga alternativo iniciado');
      } else {
        loadingSound.src = '/sounds/spectrum-loading.mp3';
        console.log('üîä Sonido de carga original iniciado');
      }
      
      loadingSound.volume = 0.5;
      
      // Intentar reproducir inmediatamente
      loadingSound.play().then(() => {
        console.log('‚úÖ Sonido de carga reproducido correctamente');
      }).catch(error => {
        console.log('‚ùå Error al reproducir sonido:', error);
      });
      
      // Parar el sonido cuando termine la animaci√≥n
      const duration = parseInt(document.querySelector('.spectrum-loader-random')?.getAttribute('data-duration') || '2000');
      setTimeout(() => {
        loadingSound.pause();
        loadingSound.currentTime = 0;
        console.log('üîá Sonido de carga detenido');
      }, duration);
      
    } catch (error) {
      console.log('‚ùå Error al crear audio:', error);
    }
  }
</script>

<style>
  .spectrum-loader-random {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    pointer-events: none;
  }

  /* Franjas del Spectrum - colores originales por defecto */
  .spectrum-border-full-random {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      to bottom,
      #ff0000 0%,
      #ff0000 calc(var(--u) * 0.02),
      #00ffff calc(var(--u) * 0.02),
      #00ffff calc(var(--u) * 0.04)
    );
    background-size: calc(var(--u) * 0.08) calc(var(--u) * 0.08);
    animation: stripeMoveFullRandom 0.8s linear infinite;
    z-index: 10;
  }

  /* Colores alternativos cuando se a√±ade la clase */
  .spectrum-loader-random.alt-colors .spectrum-border-full-random {
    background: repeating-linear-gradient(
      to bottom,
      #0066cc 0%,
      #0066cc calc(var(--u) * 0.01),
      #ffff00 calc(var(--u) * 0.01),
      #ffff00 calc(var(--u) * 0.02)
    );
    animation: stripeMoveFullRandom 1.2s linear infinite; /* M√°s lento */
  }

  /* M√°scara del viewport */
  .spectrum-viewport-mask-random {
    position: absolute;
    top: calc(var(--u) * 0.08);
    left: calc(var(--u) * 0.08);
    right: calc(var(--u) * 0.08);
    bottom: calc(var(--u) * 0.08);
    background: #c0c0c0;
    z-index: 20;
  }

  @keyframes stripeMoveFullRandom {
    0% {
      background-position: 0 0;
    }
    25% {
      background-position: 0 calc(var(--u) * 0.08);
    }
    50% {
      background-position: 0 0;
    }
    75% {
      background-position: 0 calc(var(--u) * -0.08);
    }
    100% {
      background-position: 0 0;
    }
  }
</style>
