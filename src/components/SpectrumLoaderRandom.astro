---
import SpectrumLoader from './SpectrumLoader.astro';
import SpectrumLoaderAlt from './SpectrumLoaderAlt.astro';

export interface Props {
  duration?: number;
  autoHide?: boolean;
}

const { duration = 2000, autoHide = true } = Astro.props;
---

<!-- Contenedor con ambos loaders, uno visible por defecto -->
<div class="random-loader-container" data-duration={duration} data-auto-hide={autoHide}>
  <div class="loader-original" style="display: none;">
    <SpectrumLoader type="spectrum" duration={duration} autoHide={autoHide} />
  </div>
  <div class="loader-alternative">
    <SpectrumLoaderAlt duration={duration} autoHide={autoHide} />
  </div>
</div>

<script>
  // SelecciÃ³n aleatoria simple
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.random-loader-container');
    if (!container) return;

    const originalLoader = container.querySelector('.loader-original');
    const alternativeLoader = container.querySelector('.loader-alternative');

    if (!originalLoader || !alternativeLoader) return;

    // 50% de probabilidad de cambiar al loader original
    if (Math.random() < 0.5) {
      originalLoader.style.display = 'block';
      alternativeLoader.style.display = 'none';
      console.log('ðŸŽ² Loader seleccionado: Original (Rojo/Cyan)');
    } else {
      originalLoader.style.display = 'none';
      alternativeLoader.style.display = 'block';
      console.log('ðŸŽ² Loader seleccionado: Alternativo (Azul/Amarillo)');
    }
  });
</script>

<style>
  .random-loader-container {
    position: relative;
  }
  
  .loader-original,
  .loader-alternative {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
</style>
