---
import { experiences } from '../data/experiences';

const currentExperience = experiences[0];
---

<div class="spectrum-container">
  <div class="experience-layout">
    <div class="nav-arrow nav-arrow-left" data-direction="prev">
      <div class="arrow-triangle"></div>
    </div>

    <div class="experience-card">
      <div class="card-left">
        <h3 class="company-name">{currentExperience.company}</h3>
        <div class="company-logo">
          <img src={currentExperience.logo} alt={`${currentExperience.company} logo`} />
        </div>
        <p class="dates">{currentExperience.startDate} - {currentExperience.endDate}</p>
      </div>
      <div class="card-right">
        <h3 class="position">{currentExperience.position}</h3>
        <div class="description">
          <p>{currentExperience.description}</p>
        </div>
      </div>
    </div>

    <div class="nav-arrow nav-arrow-right" data-direction="next">
      <div class="arrow-triangle"></div>
    </div>
  </div>
</div>

<style>
  .experience-layout {
    display: flex;
    align-items: flex-start;
    justify-content: center;
    gap: calc(var(--u) * 0.02);
    height: 100%;
    padding: calc(var(--u) * 0.02);
    position: relative;
    padding-top: calc(var(--u) * 0.02);
  }

  .experience-card {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 2fr);
    background: var(--spectrum-white);
    border: calc(var(--u) * 0.003) solid var(--spectrum-black);
    padding: calc(var(--u) * 0.02);
    width: calc(var(--u) * 0.7);
    height: calc(var(--u) * 0.45);
    max-height: calc(100vh - calc(var(--u) * 0.4));
    overflow: hidden;
    flex-shrink: 0;
    box-sizing: border-box;
  }

  .card-left {
    display: flex;
    flex-direction: column;
    gap: calc(var(--u) * 0.015);
    align-items: center;
    text-align: center;
    padding-right: calc(var(--u) * 0.015);
    min-width: 0;
    border-right: calc(var(--u) * 0.004) solid var(--spectrum-black);
    overflow: hidden;
    height: 100%;
    box-sizing: border-box;
  }

  .company-name {
    font-size: 1.2em;
    font-weight: bold;
    color: var(--spectrum-black);
    margin: 0;
    word-wrap: break-word;
  }

  .company-logo {
    width: 60px;
    height: 60px;
    min-width: 40px;
    min-height: 40px;
    max-width: 80px;
    max-height: 80px;
    border: 1px solid var(--spectrum-black);
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--spectrum-white);
    flex-shrink: 0;
    overflow: hidden;
    box-sizing: border-box;
  }

  .company-logo img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
    display: block;
  }

  .dates {
    font-size: 0.9em;
    color: var(--spectrum-black);
    opacity: 0.8;
    margin: 0;
  }

  .card-right {
    display: flex;
    flex-direction: column;
    gap: calc(var(--u) * 0.015);
    padding-left: calc(var(--u) * 0.015);
    overflow: hidden;
    min-width: 0;
    height: 100%;
    box-sizing: border-box;
  }

  .position {
    font-size: 1.1em;
    font-weight: bold;
    color: var(--spectrum-black);
    margin: 0;
    word-wrap: break-word;
  }

  .description {
    font-size: 1em;
    line-height: 1.4;
    color: var(--spectrum-black);
    margin: 0;
    overflow: hidden;
    flex: 1;
  }

  .description p {
    margin: 0;
    word-wrap: break-word;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
  }

  .nav-arrow {
    width: calc(var(--u) * 0.08);
    height: calc(var(--u) * 0.08);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: opacity 0.2s ease;
    position: relative;
    z-index: 10;
    flex-shrink: 0;
    background: transparent;
    align-self: center;
  }

  .nav-arrow:hover {
    opacity: 0.7;
  }

  .nav-arrow.hidden {
    opacity: 0.3;
    cursor: not-allowed;
    pointer-events: none;
  }

  .arrow-triangle {
    width: 0;
    height: 0;
    border-style: solid;
  }

  .nav-arrow-left .arrow-triangle {
    border-width: calc(var(--u) * 0.015) calc(var(--u) * 0.015) calc(var(--u) * 0.015) 0;
    border-color: transparent var(--spectrum-black) transparent transparent;
  }

  .nav-arrow-right .arrow-triangle {
    border-width: calc(var(--u) * 0.015) 0 calc(var(--u) * 0.015) calc(var(--u) * 0.015);
    border-color: transparent transparent transparent var(--spectrum-black);
  }
</style>

<script define:vars={{ experiences }}>
  let currentIndex = 0;

  function updateDisplay() {
    const experience = experiences[currentIndex];
    const card = document.querySelector('.experience-card');
    
    if (card) {
      card.innerHTML = `
        <div class="card-left">
          <h3 class="company-name">${experience.company}</h3>
          <div class="company-logo">
            <img src="${experience.logo}" alt="${experience.company} logo" />
          </div>
          <p class="dates">${experience.startDate} - ${experience.endDate}</p>
        </div>
        <div class="card-right">
          <h3 class="position">${experience.position}</h3>
          <div class="description">
            <p>${experience.description}</p>
          </div>
        </div>
      `;
    }

    const leftArrow = document.querySelector('.nav-arrow-left');
    const rightArrow = document.querySelector('.nav-arrow-right');

    if (leftArrow) {
      leftArrow.classList.toggle('hidden', currentIndex === 0);
    }

    if (rightArrow) {
      rightArrow.classList.toggle('hidden', currentIndex === experiences.length - 1);
    }
  }

  function previousExperience() {
    if (currentIndex > 0) {
      currentIndex--;
      updateDisplay();
    }
  }

  function nextExperience() {
    if (currentIndex < experiences.length - 1) {
      currentIndex++;
      updateDisplay();
    }
  }

  function goHome() {
    window.location.href = '/';
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.addEventListener('keydown', (e) => {
      switch(e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          previousExperience();
          break;
        case 'ArrowRight':
          e.preventDefault();
          nextExperience();
          break;
        case 'Escape':
        case 'Backspace':
          e.preventDefault();
          goHome();
          break;
      }
    });

    document.querySelectorAll('.nav-arrow').forEach(arrow => {
      arrow.addEventListener('click', (e) => {
        const target = e.currentTarget;
        if (target && target instanceof HTMLElement) {
          const direction = target.dataset.direction;
          if (direction === 'prev') {
            previousExperience();
          } else if (direction === 'next') {
            nextExperience();
          }
        }
      });
    });

    let startX = 0;
    let endX = 0;

    document.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
    });

    document.addEventListener('touchend', (e) => {
      endX = e.changedTouches[0].clientX;
      const diff = startX - endX;
      if (Math.abs(diff) > 50) {
        if (diff > 0) {
          nextExperience();
        } else {
          previousExperience();
        }
      }
    });

    let isDragging = false;
    let startMouseX = 0;

    document.addEventListener('mousedown', (e) => {
      isDragging = true;
      startMouseX = e.clientX;
    });

    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        e.preventDefault();
      }
    });

    document.addEventListener('mouseup', (e) => {
      if (isDragging) {
        const endMouseX = e.clientX;
        const diff = startMouseX - endMouseX;
        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            nextExperience();
          } else {
            previousExperience();
          }
        }
        isDragging = false;
      }
    });

    updateDisplay();
  });
</script>
