---
export interface Props {
  type?: 'spectrum' | 'custom';
  duration?: number;
  autoHide?: boolean;
}

const { 
  type = 'spectrum',
  duration = 2000,
  autoHide = true
} = Astro.props;
---

<!-- Capa de animaci칩n del Spectrum visible desde el principio -->
<div class="spectrum-loader-alt" data-type={type} data-duration={duration} data-auto-hide={autoHide}>
  <div class="spectrum-border-full-alt"></div>
  <div class="spectrum-viewport-mask-alt"></div>
</div>

<style>
  /* Capa de animaci칩n visible desde el principio */
  .spectrum-loader-alt {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    pointer-events: none;
  }

  /* Franjas del Spectrum visibles desde el principio - COLORS ALTERNATIVOS */
  .spectrum-border-full-alt {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      to bottom,
      #000080 0%, /* Azul oscuro */
      #000080 calc(var(--u) * 0.01), /* Franjas m치s finas (la mitad) */
      #ffff00 calc(var(--u) * 0.01), /* Amarillo */
      #ffff00 calc(var(--u) * 0.02)  /* Franjas m치s finas (la mitad) */
    );
    background-size: calc(var(--u) * 0.04) calc(var(--u) * 0.04); /* Tama침o reducido */
    animation: stripeMoveFullAlt 0.8s linear infinite;
    z-index: 10;
  }

  /* M치scara del viewport visible desde el principio */
  .spectrum-viewport-mask-alt {
    position: absolute;
    top: calc(var(--u) * 0.04); /* Ajustado al nuevo tama침o */
    left: calc(var(--u) * 0.04); /* Ajustado al nuevo tama침o */
    right: calc(var(--u) * 0.04); /* Ajustado al nuevo tama침o */
    bottom: calc(var(--u) * 0.04); /* Ajustado al nuevo tama침o */
    background: #c0c0c0;
    z-index: 20;
  }

  @keyframes stripeMoveFullAlt {
    0% {
      background-position: 0 0;
    }
    25% {
      background-position: 0 calc(var(--u) * 0.04); /* Ajustado al nuevo tama침o */
    }
    50% {
      background-position: 0 0;
    }
    75% {
      background-position: 0 calc(var(--u) * -0.04); /* Ajustado al nuevo tama침o */
    }
    100% {
      background-position: 0 0;
    }
  }
</style>

<script>
  class SpectrumLoaderAlt {
    private container: HTMLElement;
    private duration: number = 2000;
    private autoHide: boolean = true;
    private loadingSound: HTMLAudioElement | null = null;

    constructor() {
      this.container = document.querySelector('.spectrum-loader-alt') as HTMLElement;
      if (!this.container) return;

      this.duration = parseInt(this.container.dataset.duration || '2000');
      this.autoHide = this.container.dataset.autoHide === 'true';
      
      this.initAudio();
      this.init();
    }

    private initAudio() {
      try {
        // Crear elemento de audio HTML5 simple
        this.loadingSound = new Audio();
        
        // Usar archivo MP3 alternativo del usuario
        this.loadingSound.src = '/sounds/spectrum-loading-alt.mp3';
        this.loadingSound.volume = 0.5;
        
        // Intentar reproducir inmediatamente
        this.loadingSound.play().then(() => {
          console.log('游댉 Sonido de carga alternativo del Spectrum iniciado con MP3 real');
        }).catch(error => {
          console.log('HTML5 Audio fall칩:', error);
        });
        
        // Parar el sonido cuando termine la animaci칩n
        setTimeout(() => {
          if (this.loadingSound) {
            this.loadingSound.pause();
            this.loadingSound.currentTime = 0;
            console.log('游댆 Sonido de carga alternativo detenido');
          }
        }, this.duration);
        
      } catch (error) {
        console.log('Error al crear HTML5 Audio:', error);
      }
    }

    private init() {
      // La animaci칩n ya est치 visible desde el principio
      // Solo configurar la ocultaci칩n autom치tica
      if (this.autoHide) {
        setTimeout(() => {
          this.hide();
        }, this.duration);
      }
    }

    private hide() {
      // Ocultar la capa de animaci칩n con fade-out
      this.container.style.opacity = '0';
      this.container.style.transition = 'opacity 0.3s ease-in-out';
      
      // Remover completamente despu칠s del fade-out
      setTimeout(() => {
        this.container.remove();
      }, 300);
    }

    // M칠todo p칰blico para ocultar manualmente
    public hideManual() {
      this.hide();
    }
  }

  // Inicializar cuando el DOM est칠 listo
  document.addEventListener('DOMContentLoaded', () => {
    new SpectrumLoaderAlt();
  });
</script>
